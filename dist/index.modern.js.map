{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import { useLayoutEffect, useState, useRef } from 'react'\n\nconst defaultSize = [0, 0]\n\nlet resizeObserver\nconst callbacks = {}\n\n/**\n * Returns current width and height of specified element.\n *\n * @param {Ref} ref element to use in size calculation\n */\nconst useElementSize = ref => {\n  const [size, setSize] = useState(defaultSize)\n  // generate id based on current number of callbacks\n  const elId = useRef(`resize-${Object.keys(callbacks).length + 1}`)\n\n  const updateSizes = entries => {\n    window.requestAnimationFrame(() => {\n      entries.forEach(entry => {\n        const target = entry.target.current || entry.target\n        callbacks[target.getAttribute('resize-id')](entry)\n      })\n    })\n  }\n\n  // all instances use the same observer\n  resizeObserver = resizeObserver || new ResizeObserver(updateSizes)\n\n  useLayoutEffect(() => {\n    if (!ref?.current) return\n\n    ref.current.setAttribute('resize-id', elId.current)\n\n    // set initial size\n    setSize([\n      ref?.current?.getBoundingClientRect().width,\n      ref?.current?.getBoundingClientRect().height,\n    ])\n\n    // add callback for this instance\n    callbacks[elId.current] = entry => {\n      if (!entry) return\n\n      if (entry.contentBoxSize?.[0]) {\n        setSize([entry.contentBoxSize[0].inlineSize, entry.contentBoxSize[0].blockSize])\n      } else if (entries?.contentBoxSize) {\n        setSize([entry.contentBoxSize.inlineSize, entry.contentBoxSize[0].blockSize])\n      } else {\n        setSize([entry.contentRect.width, entry.contentRect.height])\n      }\n    }\n\n    // watch for size changes\n    resizeObserver.observe(ref?.current)\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      if (!ref?.current) return\n\n      resizeObserver.unobserve(ref?.current)\n    }\n  }, [ref?.current])\n\n  return size\n}\n\nexport default useElementSize\n"],"names":["defaultSize","resizeObserver","callbacks","ref","size","setSize","useState","elId","useRef","Object","keys","length","ResizeObserver","entries","window","requestAnimationFrame","forEach","entry","target","current","getAttribute","useLayoutEffect","setAttribute","_ref$current","getBoundingClientRect","width","_ref$current2","height","contentBoxSize","_entry$contentBoxSize","inlineSize","blockSize","_entries","contentRect","observe","unobserve"],"mappings":"kEAEA,MAAMA,EAAc,CAAC,EAAG,GAExB,IAAIC,EACJ,MAAMC,EAAY,kBAOKC,IACrB,MAAOC,EAAMC,GAAWC,EAASN,GAE3BO,EAAOC,EAAQ,UAASC,OAAOC,KAAKR,GAAWS,OAAS,KAiD9D,OArCAV,EAAiBA,GAAkB,IAAIW,eAVnBC,IAClBC,OAAOC,sBAAsB,KAC3BF,EAAQG,QAAQC,IAEdf,GADee,EAAMC,OAAOC,SAAWF,EAAMC,QAC5BE,aAAa,cAAcH,SAQlDI,EAAgB,aACd,GAAKlB,MAAAA,GAAAA,EAAKgB,QA2BV,OAzBAhB,EAAIgB,QAAQG,aAAa,YAAaf,EAAKY,SAG3Cd,EAAQ,CACNF,MAAAA,aAAAA,EAAKgB,4BAALI,EAAcC,wBAAwBC,MACtCtB,MAAAA,aAAAA,EAAKgB,4BAALO,EAAcF,wBAAwBG,SAIxCzB,EAAUK,EAAKY,SAAWF,YACnBA,cAEDA,EAAMW,6BAANC,EAAuB,GACzBxB,EAAQ,CAACY,EAAMW,eAAe,GAAGE,WAAYb,EAAMW,eAAe,GAAGG,sBAC5DlB,sBAAAmB,EAASJ,eAClBvB,EAAQ,CAACY,EAAMW,eAAeE,WAAYb,EAAMW,eAAe,GAAGG,YAElE1B,EAAQ,CAACY,EAAMgB,YAAYR,MAAOR,EAAMgB,YAAYN,WAKxD1B,EAAeiC,QAAQ/B,MAAAA,SAAAA,EAAKgB,SAGrB,KACAhB,MAAAA,GAAAA,EAAKgB,SAEVlB,EAAekC,UAAUhC,MAAAA,SAAAA,EAAKgB,WAE/B,CAAChB,MAAAA,SAAAA,EAAKgB,UAEFf"}