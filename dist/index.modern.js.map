{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import { useLayoutEffect, useState, useRef } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst defaultSize = [0, 0]\n\nlet resizeObserver\nconst callbacks = {}\n\n/**\n * Returns current width and height of specified element.\n *\n * @param {Ref} ref element to use in size calculation\n */\nconst useElementSize = ref => {\n  const [size, setSize] = useState(defaultSize)\n  // set unique id or reuse element's existing unique id\n  const existingId = ref?.current?.getAttribute('resize-id')\n  const elId = useRef(existingId || `resize-${uuidv4()}`)\n\n  const updateSizes = entries => {\n    entries?.forEach(entry => {\n      const target = entry.target.current || entry.target\n      callbacks[target.getAttribute('resize-id')].forEach(c => c(entry))\n    })\n  }\n\n  // all instances use the same observer\n  resizeObserver = resizeObserver || new ResizeObserver(updateSizes)\n\n  useLayoutEffect(() => {\n    if (!ref?.current) return\n\n    ref.current.setAttribute('resize-id', elId.current)\n\n    // set initial size\n    setSize([\n      ref?.current?.getBoundingClientRect().width,\n      ref?.current?.getBoundingClientRect().height,\n    ])\n\n    // add callback for this instance\n    // more than one callback can be added for an element\n    // in case of two instances watching the same ref\n    callbacks[elId.current] = [\n      ...callbacks[elId.current] || [],\n      entry => {\n      if (!entry) return\n\n      if (entry.contentBoxSize?.[0]) {\n        setSize([entry.contentBoxSize[0].inlineSize, entry.contentBoxSize[0].blockSize])\n      } else if (entry?.contentBoxSize) {\n        setSize([entry.contentBoxSize.inlineSize, entry.contentBoxSize[0].blockSize])\n      } else {\n        setSize([entry.contentRect.width, entry.contentRect.height])\n      }\n    }]\n\n    // remove existing watch\n    if (existingId) {\n      resizeObserver.unobserve(ref?.current)\n    }\n\n    // watch for size changes\n    resizeObserver.observe(ref?.current)\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      if (!ref?.current) return\n\n      resizeObserver.unobserve(ref?.current)\n    }\n  }, [ref?.current, existingId])\n\n  return size\n}\n\nexport default useElementSize\n"],"names":["defaultSize","resizeObserver","callbacks","ref","size","setSize","useState","existingId","current","_ref$current","getAttribute","elId","useRef","uuidv4","ResizeObserver","entries","forEach","entry","target","c","useLayoutEffect","setAttribute","_ref$current2","getBoundingClientRect","width","_ref$current3","height","contentBoxSize","_entry$contentBoxSize","inlineSize","blockSize","contentRect","unobserve","observe"],"mappings":"4FAGA,MAAMA,EAAc,CAAC,EAAG,GAExB,IAAIC,EACJ,MAAMC,EAAY,kBAOKC,UACrB,MAAOC,EAAMC,GAAWC,EAASN,GAE3BO,EAAaJ,MAAAA,aAAAA,EAAKK,4BAALC,EAAcC,aAAa,aACxCC,EAAOC,EAAOL,GAAe,UAASM,OAwD5C,OA9CAZ,EAAiBA,GAAkB,IAAIa,eARnBC,IAClBA,MAAAA,GAAAA,EAASC,QAAQC,IAEff,GADee,EAAMC,OAAOV,SAAWS,EAAMC,QAC5BR,aAAa,cAAcM,QAAQG,GAAKA,EAAEF,QAO/DG,EAAgB,aACd,GAAKjB,MAAAA,GAAAA,EAAKK,QAoCV,OAlCAL,EAAIK,QAAQa,aAAa,YAAaV,EAAKH,SAG3CH,EAAQ,CACNF,MAAAA,aAAAA,EAAKK,4BAALc,EAAcC,wBAAwBC,MACtCrB,MAAAA,aAAAA,EAAKK,4BAALiB,EAAcF,wBAAwBG,SAMxCxB,EAAUS,EAAKH,SAAW,IACrBN,EAAUS,EAAKH,UAAY,GAC9BS,UACKA,cAEDA,EAAMU,6BAANC,EAAuB,GACzBvB,EAAQ,CAACY,EAAMU,eAAe,GAAGE,WAAYZ,EAAMU,eAAe,GAAGG,YAErEzB,EADSY,MAAAA,GAAAA,EAAOU,eACR,CAACV,EAAMU,eAAeE,WAAYZ,EAAMU,eAAe,GAAGG,WAE1D,CAACb,EAAMc,YAAYP,MAAOP,EAAMc,YAAYL,YAKpDnB,GACFN,EAAe+B,UAAU7B,MAAAA,SAAAA,EAAKK,SAIhCP,EAAegC,QAAQ9B,MAAAA,SAAAA,EAAKK,SAGrB,KACAL,MAAAA,GAAAA,EAAKK,SAEVP,EAAe+B,UAAU7B,MAAAA,SAAAA,EAAKK,WAE/B,CAACL,MAAAA,SAAAA,EAAKK,QAASD,IAEXH"}